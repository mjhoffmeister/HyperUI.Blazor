@using Microsoft.OpenApi.Any
@using Microsoft.OpenApi.Models

@namespace HyperUI.Blazor.Internal

@if (IsReadOnly)
{
    @TextValue
}
else if (Schema?.Enum.Any() == true)
{
    <MudSelect 
        @bind-Value="@TextValue"
        T="object"
		AnchorOrigin="Origin.BottomCenter"
        Class="mb-4"
        Margin="Margin.Dense">
        @foreach (IOpenApiAny value in Schema.Enum)
        {
			object valueObject = 
				(value as OpenApiString)?.Value ?? "Invalid enum value";

			// TODO: log and don't render invalid enum values

            <MudSelectItem T="object" Value="@valueObject"/>
        }
    </MudSelect>
}
else
{
    // TODO: just pick directly from DynamicComponent?
    <MudTextField @bind-Value="@TextValue"
                  Converter="@_stringPropertyConverter"
                  Class="mb-4"
                  Margin="Margin.Dense"/>
}

@code {
    // String property converter for nullable objects
    private readonly Converter<object?> _stringPropertyConverter = new()
    {
        SetFunc = stringObject => stringObject?.ToString(),
        GetFunc = text => (object?)text,
    };

    /// <summary>
    /// Read-only indicator. Overrides <see cref="OpenApiSchema.ReadOnly"/>.
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; } = true;

    /// <summary>
    /// OpenAPI schema for the value.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public OpenApiSchema? Schema { get; set; }

    /// <summary>
    /// Value.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public object? TextValue { get; set; }
}
