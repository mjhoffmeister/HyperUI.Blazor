@using HyperUI.Core
@using Microsoft.OpenApi.Models
@using System.Text.Json

@namespace HyperUI.Blazor.Internal

@foreach ((string propertyKey, OpenApiSchema propertySchema) in _propertySchemas)
{
    <DynamicComponent Type="@propertySchema.GetComponentType()" />

    <MudTd DataLabel="@propertyKey">
        @if (propertySchema.Type == OpenApiDataType.Boolean)
		{
			// Render switches for boolean properties
			<MudSwitch Checked="@_tableContext.GetValueOrDefault(propertyKey)"
                       Disabled="true" />
        }
        else if (IsSchemaReference(propertySchema, out OpenApiSchema? referencedSchema))
        {
            // Render schema references
            IEnumerable<NestedProperty>? nestedProperties = referencedSchema?
                .TryGetNestedProperties(_tableContext.GetValueOrDefault(propertyKey));

			if (nestedProperties?.Any() == true)
			{
				// Render read-only checkboxes for nested boolean properties
				foreach (NestedProperty nestedProperty in nestedProperties)
				{
					if (nestedProperty.Type == OpenApiDataType.Boolean)
					{
						<MudCheckBox Checked="@nestedProperty.Value"
									 Class="@(nestedProperty.IsLast ? "" : "mr-7")"
								     Dense="true"
									 Disabled="true"
									 Label="@nestedProperty.Title"
									 Style="margin-top: 6px;"/>
					}
				}
			}
		}
		else
		{
			// Render text for other types
			@_tableContext.GetValueOrDefault(propertyKey)
		}
    </MudTd>
}
<MudTd>
    @if (_tableContext.CanDelete())
    {
        <MudIconButton aria-label="delete"
                        Icon="@Icons.Material.Filled.Delete"
                        OnClick="@(() => OnDelete(@_tableContext.GetValueOrDefault("@id")))">
        </MudIconButton>
    }
</MudTd>

@code {
    // Property schemas
    private IDictionary<string, OpenApiSchema> _propertySchemas = 
        new Dictionary<string, OpenApiSchema>();

    // Table context
    private Dictionary<string, object?> _tableContext = new();

    [EditorRequired]
    [Parameter]
    public EventCallback<object?> OnDeleteButtonClickedCallback { get; set; }

    /// <summary>
    /// Property schemas.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public IDictionary<string, OpenApiSchema>? PropertySchemas { get; set; }

    /// <summary>
    /// Delegate function for resolving referenced schemas.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public Func<OpenApiSchema, OpenApiSchema?>? ResolveSchemaReferenceDelegate { get; set; }

    /// <summary>
    /// Table context.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public Dictionary<string, object?>? TableContext { get; set; }

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        if (PropertySchemas != null)
            _propertySchemas = PropertySchemas;

        if (TableContext != null)
            _tableContext = TableContext;
    }

    /// <summary>
    /// Determines whether a property schema is a schema reference.
    /// </summary>
    /// <param name="propertySchema">Property schema.</param>
    /// <param name="resolvedSchemaReference">
    /// The resolved schema reference if the property schema is a schema reference.
    /// </param>
    /// <returns>
    /// <see cref="true"/> if the property schema is a schema reference; <see cref="false"/>,
    /// otherwise.
    /// </returns>
    private bool IsSchemaReference(
        OpenApiSchema propertySchema, out OpenApiSchema? resolvedSchemaReference)
    {
        resolvedSchemaReference = ResolveSchemaReferenceDelegate != null ?
            ResolveSchemaReferenceDelegate(propertySchema) : null;

        return resolvedSchemaReference != null;
    }

    /// <summary>
    /// Handles deletes.
    /// </summary>
    /// <param name="idObject">Id object.</param>
    /// <returns>The result of the async task.</returns>
    private async Task OnDelete(object? idObject)
    {
        await OnDeleteButtonClickedCallback.InvokeAsync(idObject);
    }
}