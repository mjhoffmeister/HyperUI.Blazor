@using HyperUI.Core
@using Microsoft.OpenApi.Any
@using Microsoft.OpenApi.Models

@namespace HyperUI.Blazor.Internal

@foreach (PropertyGroup propertyGroup in _propertyGroups)
{
	<MudTd DataLabel="@propertyGroup.Name">
        <MudGrid Spacing="4">
		    @foreach (string propertyKey in propertyGroup.PropertyKeys)
		    {
                (IDictionary<string, object?> parameters, Type type) = GetComponentConfiguration(
                    propertyKey,
                    TableContext.GetValueOrDefault(propertyKey),
                    IsReadOnly,
                    EventCallback.Factory.Create<object>(this, changedValue => 
                        TableContext.TrySet(propertyKey, changedValue)));

                <MudItem lg="@GetBreakpoint(propertyGroup)">
			        <DynamicComponent 
				        Parameters="@parameters"
				        Type="@type" />
                </MudItem>
		    }
        </MudGrid>
	</MudTd>
}
<MudTd>
	@if (@TableContext.CanDelete())
	{
		<MudIconButton aria-label="delete"
                       Class="my-n1"
			           Icon="@Icons.Material.Filled.Delete"
                       OnClick="@(() => OnDelete(@TableContext.GetValueOrDefault("@id")))">
		</MudIconButton>
	}
</MudTd>

<style>
    input {
        font-size: @_inputFontSize !important;
    }
</style>

@code {
    // Bool property converter for nullable objects
    private readonly BoolConverter<object?> _boolPropertyConverter = new()
    {
        GetFunc = value => value == true,
        SetFunc = boolObject => boolObject is bool value && value,
    };

    // Theming doesn't give control over the selected value in select elements, so it has to be
    // overridden in CSS
    private readonly string _inputFontSize = "0.875em";

    // Property groups
    private IEnumerable<PropertyGroup> _propertyGroups = Enumerable.Empty<PropertyGroup>();

    /// <summary>
    /// Read-only indicator for rows.
    /// </summary>
    [Parameter]
    public bool IsReadOnly { get; set; } = false; 

    /// <summary>
    /// Delete callback.
    /// </summary>
    [Parameter]
    public EventCallback<object?> OnDeleteCallback { get; set; }

    /// <summary>
    /// Schema.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public OpenApiSchema Schema { get; set; } = new();

    /// <summary>
    /// Table context.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public Dictionary<string, object?> TableContext { get; set; } = new();

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        _propertyGroups = Schema.GetPropertyGroups(true);
    }

    /// <summary>
    /// Gets a grid item breakpoint.
    /// </summary>
    /// <param name="propertyGroup">Property group.</param>
    /// <returns>Breakpoint.</returns>
    private int GetBreakpoint(PropertyGroup propertyGroup)
    {
        // MudGrid is based on a 12-point system. This gives full width to single-property groups 
        // and lets MudBlazor handle spacing for multi-property groups.
        return propertyGroup.PropertyKeys.Count() == 1 ? 12 : 0;
    }

    /// <summary>
    /// Gets component configuration for dynamically-rendered components.
    /// </summary>
    /// <param name="propertyKey">Property key.</param>
    /// <param name="value">Value.</param>
    /// <param name="isReadOnly">Read-only indicator.</param>
    /// <param name="valueChangedCallback">Value changed callback</param>
    /// <returns>Component configuration.</returns>
    private (IDictionary<string, object?>, Type) GetComponentConfiguration(
        string propertyKey,
        object? value,
        bool isReadOnly,
        EventCallback<object> valueChangedCallback)
    {
        return Schema!.GetComponentConfiguration(
            propertyKey,
            value,
            isReadOnly,
            enumValues => SelectItemsBuilder(enumValues),
            valueChangedCallback);
    }

    /// <summary>
    /// Builds a <see cref="RenderFragment"/> of select items from OpenAPI enum values.
    /// </summary>
    /// <param name="enumValues">Enum values.</param>
    /// <returns><see cref="RenderFragment/>.</returns>
    private RenderFragment SelectItemsBuilder(IList<IOpenApiAny> enumValues) => builder =>
    {
        foreach (IOpenApiAny enumValue in enumValues)
        {
            object enumValueObject = 
				(enumValue as OpenApiString)?.Value ?? "Invalid enum value";

            builder.OpenComponent<MudSelectItem<object>>(0);
            builder.AddAttribute(1, "Value", enumValueObject);
            builder.CloseComponent();
        }
    };

    /// <summary>
    /// Handles deletes.
    /// </summary>
    /// <param name="idObject">Id object.</param>
    /// <returns>The result of the async task.</returns>
    private async Task OnDelete(object? idObject)
    {
        await OnDeleteCallback.InvokeAsync(idObject);
    }
}