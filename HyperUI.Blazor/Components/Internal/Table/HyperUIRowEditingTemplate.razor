@using HyperUI.Core
@using Microsoft.OpenApi.Models

@namespace HyperUI.Blazor.Internal

@foreach ((string propertyKey, OpenApiSchema propertySchema) in _propertySchemas)
{
	<MudTd DataLabel="@propertyKey">
		@if (propertySchema.ReadOnly
				|| (!@_tableContext.CanEdit() && TableEditState != TableEditState.EditingNewItem))
		{
			if (propertySchema.Type == OpenApiDataType.Boolean)
			{
				<MudSwitch Checked="@context.GetValueOrDefault(propertyKey)"
						   Disabled="true" />
			}
			else
			{
				@context.GetValueOrDefault(propertyKey);
			}
		}
		else if (propertySchema.Type == OpenApiDataType.Boolean)
		{
			<MudSwitch @bind-Checked="@context[propertyKey]"
						Color="Color.Primary"
					    Converter="@_boolPropertyConverter" />
		}
		else if (propertySchema.Enum.Any())
		{
			<MudSelect 
                @bind-Value="@context[propertyKey]"
                T="object"
				AnchorOrigin="Origin.BottomCenter"
                Label="@propertySchema.Title"
                Variant="Variant.Outlined">
                @foreach (IOpenApiAny value in propertySchema.Enum)
                {
					object valueObject = 
						(value as OpenApiString)?.Value ?? "Invalid enum value";

					// TODO: log and don't render invalid enum values

                    <MudSelectItem T="object" Value="@valueObject"/>
                }
            </MudSelect>
        }
        else
        {
            <MudTextField 
				@bind-Value="@context[propertyKey]"
				Converter="@_stringPropertyConverter" />
        }
	</MudTd>
}

@code {
    // Property schemas
    private IDictionary<string, OpenApiSchema> _propertySchemas = 
        new Dictionary<string, OpenApiSchema>();

    // Table context
    private Dictionary<string, object?> _tableContext = new();

    /// <summary>
    /// Property schemas.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public IDictionary<string, OpenApiSchema>? PropertySchemas { get; set; }

    /// <summary>
    /// Delegate function for resolving referenced schemas.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public Func<OpenApiSchema, OpenApiSchema?>? ResolveSchemaReferenceDelegate { get; set; }

    /// <summary>
    /// Table context.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public Dictionary<string, object?>? TableContext { get; set; }

    /// <summary>
    /// Table edit state.
    /// </summary>
    [EditorRequired]
    [Parameter]
    public TableEditState TableEditState { get; set; } = TableEditState.NotEditing;

    /// <inheritdoc/>
    protected override void OnInitialized()
    {
        if (PropertySchemas != null)
            _propertySchemas = PropertySchemas;

        if (TableContext != null)
            _tableContext = TableContext;
    }
}
